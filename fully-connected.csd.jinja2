<CsoundSynthesizer>
i 1 0 3600
<CsOptions>
;-L stdin -odac           -iadc     -dm6    ;;;RT audio I/O
 -L stdin -odac           -iadc     -dm6  -+rtaudio=jack -+jack_client=csoundFullyConnected  -b 1024 -B 2048   ;;;RT audio I/O
; For Non-realtime ouput leave only the line below:
; -o grain3.wav -W ;;; for file output any platform
</CsOptions>
<CsInstruments>

sr	=  48000
;kr      =  100
ksmps   =  16
nchnls	=  2
0dbfs = 1

;;;#define SIZE #268435456#
#define SIZE #4194304#

{% for neuron in neurons %}
      gao{{neuron["id"]}} init 0
   {% for from in neuron["inputs"] %} 
      gkw{{from}}_{{neuron["id"]}} init 0
   {% endfor %}
{% endfor %}




/* f#  time  size  1  filcod  skiptime  format  channel */


giEXP = -1
giLINEAR = 0

FLcolor	180,200,199
;;;
;;;     [1] [2] [X] [Y]
;;;    /\/\/\/\/\/\/\/\
;;;  [ ] [ ] [ ] [ ] [ ]
;;;     \/\/\/\/\/\/\/
;;;    [ ] [ ] [ ] [ ]
;;;      \/\/\/\/\/
;;;       [1] [2]
;;; 4 inputs
;;; layer 1
;;; w1_1

gkSet init 0
gkGet init 1
gkShift init 0

;;; FLpanel "Network",500,{{n_neurons*50 + 15*n_params + 50}}
;;; FLpanel "FullyConnected",500,{{n_neurons*50 + 15*n_params + 150}}, -1, -1, 5, 1, 1
gibl = {{15*(n_controls + 2) + 150}}
FLpanel "FullyConnected",500,gibl, -1, -1, 5, 1, 1
        imin = -4
        imax = 4
        islw = 500
        islh = 15
        itype = 5
        ioff = islh
        ibl = gibl - 150
{% for control in controls %}
   gkw{{control[1]}}_{{control[0]}}, giww{{control[1]}}_{{control[0]}} FLslider "{{control[1]}}_{{control[0]}}", imin, imax, 0, itype, -1, islw, islh, 0, ioff*{{loop.index}}
{% endfor %}

   kbz, ibz FLbutton "0"      ,    1, 0, 11, 50, 50,   0, ibl, 105, 1000, 0, kr/sr
   kbz, ibz FLbutton "Random*",    1, 0, 11, 50, 50, 150, ibl, 105,  666, 0, kr/sr
   kbz, ibz FLbutton "Random*[1]", 1, 0, 11, 50, 50, 200, ibl, 105,  667, 0, kr/sr
   kbz, ibz FLbutton "90%"    ,    1, 0, 11, 50, 50, 250, ibl, 105,  800, 0, kr/sr, 0.9
   kbz, ibz FLbutton "110%",       1, 0, 11, 50, 50, 300, ibl, 105,  800, 0, kr/sr, 1.1  

   kbz, ibz FLbutton "SAVE",       1, 0, 11, 50, 50, 350, ibl, 105,  6021, 0, 1.0
   kbz, ibz FLbutton "LOAD",       1, 0, 11, 50, 50, 400, ibl, 105,  6020, 0, 1.0
;; kout, ihandle FLbutBank itype, inumx, inumy, iwidth, iheight, ix, iy, \
;;      iopcode [, kp1] [, kp2] [, kp3] [, kp4] [, kp5] [....] [, kpN]
   gkGet,ih1	FLbutBank	11, 10,1,  500,50, 0,ibl+50   ,0,6000,0,kr/sr
   gkSet,ih2	FLbutBank	11, 10,1,  500,50, 0,ibl+50+50,0,6001,0,kr/sr

FLpanelEnd	;***** end of container

FLrun		;***** runs the widget thread 

instr 1
kascii   FLkeyIn
ktrig changed kascii
if (kascii > 0) then
  if (ktrig > 0 && kascii >= 481 && kascii <= 482) then
    gkShift = 1
  endif
  if (ktrig > 0 && kascii >= 48 && kascii <= 57) then
    if (gkShift > 0) then
       printf "Set State: %i\n", ktrig, kascii
       event "i", 6011, 0, 0, kascii - 48
    else
       printf "Get State: %i\n", ktrig, kascii
       event "i", 6010, 0, 0, kascii - 48
    endif
  endif
  if (ktrig > 0 && kascii == 114) then
       event "i", 666, 0, 0
  endif
  if (ktrig > 0 && kascii == 116) then
       event "i", 667, 0, 0
  endif
  if (ktrig > 0 && kascii == 91) then
       event "i", 800, 0, 0, 0.9
  endif
  if (ktrig > 0 && kascii == 93) then
       event "i", 800, 0, 0, 1.1
  endif
  printf "Key Down: %i\n", ktrig, kascii
else
  if (ktrig > 0 && kascii >= -482 && kascii <= -481) then
    gkShift = 0
  endif
  printf "Key Up: %i\n", ktrig, -kascii
endif
endin


gkSaved init 0
gkLoad init 0


	instr	6000
	inumel	FLgetsnap	i(gkGet)
        printf_i "GET SNAP %i\n", 1, i(gkGet)
        printf_i "inumel %i \n", 1, inumel
        endin
	instr	6010
        igkget = p4
	inumel	FLgetsnap	igkget
        printf_i "GET SNAP %i\n", 1, igkget
        printf_i "inumel %i \n", 1, inumel
        endin

	instr	6001
        printf_i "SET SNAP %i\n", 1, i(gkSet)
	isnap, inumel	FLsetsnap i(gkSet)
        printf_i "isnap inumel %i %i \n", 1, isnap, inumel
        endin
	instr	6011
        igkset = p4
        printf_i "SET SNAP %i\n", 1, igkset
	isnap, inumel	FLsetsnap igkset
        printf_i "isnap inumel %i %i \n", 1, isnap, inumel
        endin

	instr 6020 ;;; load
	FLloadsnap "fully-connected.sav"
	endin
	instr 6021 ;;; save
	FLsavesnap "fully-connected.sav"
	endin

instr 100
   ;;; get inputs
   ai1, ai2 ins
   {% for neuron in input_layer %}
      gao{{neuron["id"]}} = ai{{loop.index}}
   {% endfor %}

   ;;; setup the neurons
   {% for neuron in neurons %}
      ao{{neuron["id"]}} delay gao{{neuron["id"]}},2*kr/sr
   {% endfor %}


   {% for neuron in neuron_layer + output_layer %}
      gao{{neuron["id"]}} = tanh(1.0*(
      {% for from in neuron["inputs"] %} \
          gkw{{from}}_{{neuron["id"]}}*ao{{from}} {{ "+" if not loop.last }} \
      {% endfor %} \
      ))
   {% endfor %}


   outs gao{{output_layer[0]["id"]}},gao{{output_layer[-1]["id"]}}
   

endin

instr 1000;;;; "zero"
   {% for neuron in neuron_layers %}
      {% for from in neuron["inputs"] %} 
          gkw{{from}}_{{neuron["id"]}} = 0
          FLsetVal_i 0, giww{{from}}_{{neuron["id"]}}
      {% endfor %} 
   {% endfor %}
      p3 = 0      
endin

instr 666 ;;;;
   {% for neuron in neuron_layer %}
      {% for from in neuron["inputs"] %} 
      iv_{{from}}_{{neuron["id"]}} = rnd(2) - 1
      gkw{{from}}_{{neuron["id"]}} = iv_{{from}}_{{neuron["id"]}}
      FLsetVal_i iv_{{from}}_{{neuron["id"]}}, giww{{from}}_{{neuron["id"]}}
      {% endfor %} 
   {% endfor %}
      p3 = 0
endin


instr 667 ;;;; choose 1

   {% for neuron in neuron_layer %}
      {% for from in neuron["inputs"] %}
      ichoice = rnd(1)
      if (ichoice > 1.0 - 1/({{n_params}})) then
          iv_{{from}}_{{neuron["id"]}} = rnd(2) - 1
          gkw{{from}}_{{neuron["id"]}} = iv_{{from}}_{{neuron["id"]}}
         FLsetVal_i iv_{{from}}_{{neuron["id"]}}, giww{{from}}_{{neuron["id"]}}
      endif
      {% endfor %} 
   {% endfor %}
      p3 = 0

endin


instr 800 ;;;; scale
      iscale = p4
   {% for neuron in neuron_layer %}
      {% for from in neuron["inputs"] %}
      
      iv_{{from}}_{{neuron["id"]}} = iscale*i(gkw{{from}}_{{neuron["id"]}})
      gkw{{from}}_{{neuron["id"]}} = iv_{{from}}_{{neuron["id"]}}
      FLsetVal_i iv_{{from}}_{{neuron["id"]}}, giww{{from}}_{{neuron["id"]}}
      {% endfor %} 
   {% endfor %}

      p3 = 0
endin





</CsInstruments>
<CsScore>
t 0 60

f 0 3600

i 100 0 3600
i 1 0 3600

e
</CsScore>
</CsoundSynthesizer>
